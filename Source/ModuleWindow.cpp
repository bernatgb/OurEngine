#include "Globals.h"
#include "Application.h"
#include "ModuleWindow.h"

#include "imgui.h"
#include "imgui_impl_sdl.h"
#include "imgui_impl_opengl3.h"

ModuleWindow::ModuleWindow()
{
}

// Destructor
ModuleWindow::~ModuleWindow()
{
}

// Called before render is available
bool ModuleWindow::Init()
{
	MY_LOG("Init SDL window & surface");
	bool ret = true;

	if (SDL_Init(SDL_INIT_VIDEO) < 0)
	{
		MY_LOG("SDL_VIDEO could not initialize! SDL_Error: %s\n", SDL_GetError());
		ret = false;
	}
	else
	{
		//Create window
		width = SCREEN_WIDTH;
		height = SCREEN_HEIGHT;
		Uint32 flags = SDL_WINDOW_SHOWN | SDL_WINDOW_OPENGL;

		if (FULLSCREEN == true)
		{
			flags |= SDL_WINDOW_FULLSCREEN_DESKTOP;
			fullscreen = true;
		}
		else
		{
			flags |= SDL_WINDOW_RESIZABLE;
			fullscreen = false;
		}

		SDL_DisplayMode current;
		SDL_GetCurrentDisplayMode(0, &current);
		width = current.w * DEFAULT_SCREEN_RATIO;
		height = current.h * DEFAULT_SCREEN_RATIO;

		window = SDL_CreateWindow(TITLE, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, width, height, flags);

		if (window == NULL)
		{
			MY_LOG("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			ret = false;
		}
		else
		{
			SDL_Surface* surface;     // Declare an SDL_Surface to be filled in with pixel data from an image file
			Uint16 pixels[24 * 24] = {  // ...or with raw pixel data:
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1310, 0x7310, 0x3310, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6420, 0xf420, 0x9421, 0x3433, 0x2432, 0x0433, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1521, 0x0421, 0x0000, 0x0000, 0x0000, 0x0421, 0xc421, 0xf421, 0xf421, 0xf432, 0xa432, 0x0433, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0310, 0xa421, 0xb421, 0x9521, 0x5521, 0x2421, 0x9421, 0xf421, 0xf421, 0xf421, 0xf431, 0x5443, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xb421, 0xf421, 0xf421, 0xf421, 0xe421, 0xe421, 0xf431, 0xf431, 0xf431, 0xf421, 0x6431, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1310, 0xc421, 0xf421, 0xf421, 0xf421, 0xf531, 0xf532, 0xf542, 0xf531, 0xf532, 0xf431, 0xd531, 0x2531, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3310, 0xd420, 0xf421, 0xf421, 0xf421, 0xf531, 0xf542, 0xf542, 0xf531, 0xf542, 0xf532, 0xf431, 0x9431, 0x0421, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x1443, 0x7443, 0x2543, 0x0000, 0x0000, 0x1310, 0xb432, 0xf542, 0xf421, 0xf431, 0xf532, 0xf543, 0xf543, 0xf531, 0xf543, 0xf532, 0xf431, 0xe421, 0x7421, 0x0420, 0x0000, 0x0000,
				0x0000, 0x0000, 0x3443, 0xe443, 0x5543, 0x0000, 0x0000, 0x0000, 0xa543, 0xf542, 0xf421, 0xf532, 0xf543, 0xf553, 0xf543, 0xf431, 0xf543, 0xf542, 0xf532, 0xf431, 0xe421, 0x6421, 0x0000, 0x0000,
				0x0000, 0x0000, 0x2443, 0xe443, 0x6543, 0x0000, 0x0000, 0x0000, 0xa421, 0xf421, 0xf532, 0xf542, 0xf543, 0xf554, 0xf553, 0xf431, 0xf554, 0xf543, 0xf542, 0xf532, 0xf431, 0xe421, 0x5320, 0x0000,
				0x0000, 0x0000, 0x3443, 0xe443, 0x6543, 0x0000, 0x0542, 0x4421, 0xd420, 0xf421, 0xf531, 0xf531, 0xf532, 0xf542, 0xf542, 0xf531, 0xf542, 0xf542, 0xf542, 0xf531, 0xf531, 0xf421, 0xe420, 0x3320,
				0x0000, 0x0000, 0x5443, 0xf443, 0x9432, 0x9421, 0xd421, 0xe431, 0xf531, 0xf531, 0xf543, 0xf554, 0xf654, 0xf654, 0xf543, 0xf531, 0xf553, 0xf654, 0xf554, 0xf543, 0xf542, 0xf531, 0x5531, 0x0310,
				0x0000, 0x0000, 0x7431, 0xf421, 0xf431, 0xf532, 0xf542, 0xf543, 0xf542, 0xf531, 0xf543, 0xf554, 0xf554, 0xf554, 0xf543, 0xf531, 0xf543, 0xf554, 0xf553, 0xf543, 0xf542, 0xe431, 0x0421, 0x0000,
				0x0000, 0x0000, 0x8542, 0xf431, 0xf543, 0xf543, 0xf543, 0xf553, 0xf543, 0xf421, 0xf532, 0xf532, 0xf532, 0xf532, 0xf531, 0xf431, 0xf531, 0xf532, 0xf532, 0xf432, 0xf432, 0xe421, 0x1310, 0x0000,
				0x0000, 0x0000, 0x9543, 0xf532, 0xf553, 0xf433, 0xf332, 0xf443, 0xf543, 0xf432, 0xf654, 0xf654, 0xf654, 0xf542, 0xf421, 0xf421, 0xf421, 0xf542, 0xf654, 0xf654, 0xf654, 0xe532, 0x0000, 0x0000,
				0x0000, 0x0411, 0xa542, 0xf532, 0xf543, 0xf333, 0xf344, 0xf332, 0xf543, 0xf532, 0xf654, 0xf654, 0xf554, 0xf531, 0xf531, 0xf531, 0xf431, 0xf532, 0xf554, 0xf554, 0xf554, 0xe542, 0x0000, 0x0000,
				0x0000, 0xb421, 0xe432, 0xf532, 0xf542, 0xf334, 0xf333, 0xf333, 0xf542, 0xf532, 0xf553, 0xf553, 0xf553, 0xf531, 0xf531, 0xf531, 0xf531, 0xf531, 0xf543, 0xf542, 0xf543, 0xe542, 0x0000, 0x0000,
				0x0000, 0xd542, 0xf532, 0xf431, 0xf432, 0xf332, 0xf332, 0xf332, 0xf532, 0xf532, 0xf543, 0xf543, 0xf543, 0xf531, 0xf431, 0xf431, 0xf531, 0xf531, 0xf543, 0xf543, 0xf543, 0xe532, 0x0000, 0x0000,
				0x0000, 0xd432, 0xf431, 0xf421, 0xf431, 0xf431, 0xf431, 0xf431, 0xf431, 0xf431, 0xf532, 0xf431, 0xf532, 0xf421, 0xf421, 0xf421, 0xf421, 0xf431, 0xf542, 0xf542, 0xf542, 0xe531, 0x0000, 0x0000,
				0x5431, 0xe431, 0xf421, 0xf321, 0xf322, 0xf321, 0xf321, 0xf321, 0xf321, 0xf421, 0xf421, 0xf431, 0xf432, 0xf320, 0xf310, 0xf310, 0xf320, 0xf421, 0xf432, 0xf432, 0xf532, 0xd531, 0x0000, 0x0000,
				0x0421, 0x1431, 0x4322, 0xf322, 0xf221, 0xf221, 0xf221, 0xf211, 0xf221, 0xf321, 0xf322, 0xf321, 0xf322, 0xf322, 0xf321, 0xf321, 0xf322, 0xf322, 0xf322, 0xf321, 0xf321, 0xe321, 0x1322, 0x0000,
				0x0000, 0x0000, 0x0211, 0x2211, 0x2211, 0x2211, 0x2211, 0x2211, 0x6321, 0xe322, 0xf322, 0xf221, 0xf222, 0xf222, 0xf222, 0xf222, 0xf222, 0xf222, 0xf221, 0xf221, 0xf221, 0xf221, 0x4221, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2221, 0x7211, 0x8211, 0x8211, 0xf211, 0xf222, 0xf222, 0xf222, 0xf222, 0xf222, 0xf211, 0xa211, 0x8211, 0x8211, 0x1211, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0211, 0x5211, 0x4221, 0x4221, 0x4221, 0x4221, 0x4221, 0x5211, 0x1211, 0x0000, 0x0000, 0x0000, 0x0000
			};
			surface = SDL_CreateRGBSurfaceFrom(pixels, 24, 24, 16, 24 * 2, 0x0f00, 0x00f0, 0x000f, 0xf000);

			// The icon is attached to the window pointer
			SDL_SetWindowIcon(window, surface);

			// ...and the surface containing the icon pixel data is no longer required.
			SDL_FreeSurface(surface);

			//Get window surface
			screen_surface = SDL_GetWindowSurface(window);
		}
	}

	return ret;
}

// Called before quitting
bool ModuleWindow::CleanUp()
{
	MY_LOG("Destroying SDL window and quitting all SDL systems");

	//Destroy window
	if (window != NULL)
	{
		SDL_DestroyWindow(window);
	}

	//Quit SDL subsystems
	SDL_Quit();
	return true;
}

void ModuleWindow::WindowResized(unsigned _width, unsigned _height)
{
	width = _width;
	height = _height;
}

void ModuleWindow::DrawImGui()
{
	if (ImGui::CollapsingHeader("Window"))
	{
		if (ImGui::Checkbox("Fullscreen", &fullscreen)) {
			if (fullscreen) SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN_DESKTOP);
			else SDL_SetWindowFullscreen(window, 0);
		}

		ImGui::Separator();

		ImGui::Text("Width: %i", width);
		ImGui::Text("Height: %i", height);
		
		ImGui::Separator();

		SDL_DisplayMode current;
		SDL_GetCurrentDisplayMode(0, &current);
		ImGui::Text("Screen width: %i", current.w);
		ImGui::Text("Screen height: %i", current.h);
	}
}

